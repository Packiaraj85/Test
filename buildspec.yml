# Sample Test
version: 0.2
phases:
  pre_build:
    commands:
      # Step 1: Clone the code repository from GitHub
      - echo "Cloning code repository from GitHub..."
      - |
        if ! git clone https://github.com/Packiaraj85/Test.git; then
          echo "Git clone failed. Exiting..."
          exit 1
        fi

      # Step 2: Launch a Windows Server EC2 instance with retries
      - echo "Launching Windows Server EC2 instance..."
      - |
        RETRY_COUNT=3
        for i in $(seq 1 $RETRY_COUNT); do
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0324a83b82023f0b3 --instance-type t2.micro --key-name keypass.pem --security-group-ids sg-0de0de45d39c0c44f --subnet-id subnet-0c4d6b9093a721740 --query 'Instances[0].InstanceId' --output text)
          if [ -n "$INSTANCE_ID" ]; then
            echo "Instance launched successfully: $INSTANCE_ID"
            break
          elif [ $i -eq $RETRY_COUNT ]; then
            echo "Failed to launch EC2 instance after $RETRY_COUNT attempts. Exiting..."
            exit 1
          else
            echo "Retrying to launch EC2 instance ($i/$RETRY_COUNT)..."
            sleep 10
          fi
        done

      # Wait for the instance to be in the running state
      - echo "Waiting for the instance to reach running state..."
      - aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      # Get the public DNS of the instance for remote connection
      - INSTANCE_PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)

      # Step 3: Install .NET Framework 2.0 on the Windows Server instance using AWS SSM
      - echo "Installing .NET Framework 2.0 on the Windows instance..."
      - |
        if ! aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" --parameters '{"commands":["Install-WindowsFeature -Name NET-Framework-Core"], "executionTimeout":["3600"]}'; then
          echo "Failed to install .NET Framework 2.0. Exiting..."
          exit 1
        fi

  build:
    commands:
      # Step 4: Copy the cloned code to the Windows Server instance with retries
      - echo "Copying code to the Windows Server..."
      - |
        if ! aws s3 cp ./Test s3://testbuildcode/cloned-repo/ --recursive; then
          echo "Failed to upload code to S3. Exiting..."
          exit 1
        fi
      - |
        if ! aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" --parameters "{\"commands\":[\"aws s3 sync s3://testbuildcode/cloned-repo/ C:\\build\"],\"executionTimeout\":[\"3600\"]}"; then
          echo "Failed to copy code from S3 to Windows Server. Exiting..."
          exit 1
        fi

      # Step 5: Execute multiple scripts in a specific order with error checks
      - echo "Executing build scripts on the Windows Server in order..."
      - |
        SCRIPTS=("script1.bat" "script2.bat" "script3.bat" "script4.bat" "script5.bat")
        for script in "${SCRIPTS[@]}"; do
          if ! aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" --parameters "{\"commands\":[\"cd C:\\\\build\", \"if (Test-Path .\\\\$script) { .\\\\$script } else { exit 1 }\"]}"; then
            echo "Execution of $script failed. Exiting..."
            exit 1
          fi
        done

  post_build:
    commands:
      # Step 6: Upload build artifacts from the Windows Server to an S3 bucket with retries
      - echo "Uploading build artifacts to S3..."
      - |
        RETRY_COUNT=3
        for i in $(seq 1 $RETRY_COUNT); do
          if aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" --parameters "{\"commands\":[\"aws s3 sync C:\\\\build s3://testbuildcode/build-output/\"]}"; then
            echo "Artifacts uploaded successfully."
            break
          elif [ $i -eq $RETRY_COUNT ]; then
            echo "Failed to upload artifacts to S3 after $RETRY_COUNT attempts. Exiting..."
            exit 1
          else
            echo "Retrying to upload artifacts to S3 ($i/$RETRY_COUNT)..."
            sleep 10
          fi
        done

      # Step 7: Clean up and terminate the Windows Server EC2 instance
      - echo "Terminating the Windows Server instance..."
      - aws ec2 terminate-instances --instance-ids $INSTANCE_ID

      # Wait for the instance to be terminated
      - echo "Waiting for instance termination..."
      - aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID

artifacts:
  files:
    - '**/*'
